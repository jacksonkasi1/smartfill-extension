// ** import types
import type { AIFormData, FormField } from '@/types/extension'

// ** import constants
import { GEMINI_API_URL } from './constants'

// ** import utils
import { buildPrompt } from './prompt'
import { parseAIResponse } from './parser'

export async function generateFormData(fields: FormField[], customPrompt?: string): Promise<AIFormData> {
  const result = await chrome.storage.sync.get(['geminiApiKey'])
  const apiKey = result.geminiApiKey

  if (!apiKey) {
    throw new Error('No Gemini API key found')
  }

  const prompt = buildPrompt(fields, customPrompt)

  const response = await fetch(`${GEMINI_API_URL}?key=${apiKey}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    })
  })

  if (!response.ok) {
    let errorMessage = `Gemini API error: ${response.status} ${response.statusText}`
    try {
      const errorData = await response.json()
      if (errorData.error?.message) {
        errorMessage = errorData.error.message
      }
    } catch {
      // Keep original error message if JSON parsing fails
    }
    throw new Error(errorMessage)
  }

  const data = await response.json()

  const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text
  if (!generatedText) {
    throw new Error('No content generated by Gemini AI')
  }

  return parseAIResponse(generatedText, fields)
}